/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import {useFrame, useThree } from '@react-three/fiber'
import {a} from '@react-spring/three'

import islandScene from '../assets/3d/island.glb'
export function Island({isRotating, setIsRotating, setCurrentStage, currentFocusPoint, ...props}) {
    const {gl, viewport} = useThree()
    const { nodes, materials } = useGLTF(islandScene)
    const islandRef = useRef()

    const lastX = useRef(0)
    const rotationSpeed = useRef(0)
    const dampingFactor = 0.95 //controls velocity??

    const handlePointerDown = (e) => {//click
        e.stopPropagation()
        e.preventDefault()
        setIsRotating(true)

        //check if mouse event or phone
        const clientX = e.touches? e.touches[0].clientX: e.clientX

        //store last event
        lastX.current = clientX
    }

    const handlePointerUp = (e) => {//release
        e.stopPropagation()
        e.preventDefault()
        setIsRotating(false)
    }

    const handlePointerMove = (e) => {
        e.stopPropagation()
        e.preventDefault()

        if(isRotating){
            //check if mouse event or phone
            const clientX = e.touches? e.touches[0].clientX: e.clientX

            //calculate change in horizontal position
            const delta = (clientX - lastX.current) / viewport.width

            // update island position based on mouse
            islandRef.current.rotation.y += delta * 0.01 * Math.PI
            lastX.current = clientX
            rotationSpeed.current = delta * 0.01 * Math.PI
        }

    }

    const handleKeyDown = (e) => {
        if(e.key === 'ArrowLeft'){
            if (!isRotating) setIsRotating(true)
            islandRef.current.rotation.y +=  0.01 * Math.PI
        } else if (e.key === 'ArrowRight') {
            if (!isRotating) setIsRotating(true)
            islandRef.current.rotation.y -=  0.01 * Math.PI
        }
    }

    const handleKeyUp = (e) => {
        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight'){
            setIsRotating(false)
        }
    }

    useFrame(() => {//applies each frame
        if(!isRotating){
            rotationSpeed.current *= dampingFactor

            if(Math.abs(rotationSpeed.current) < 0.001){
                rotationSpeed.current = 0
            }
            islandRef.current.rotation.y += rotationSpeed.current
        } else {
            // When rotating, determine the current stage based on island's orientation
            const rotation = islandRef.current.rotation.y;

            /**
             * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
             * The goal is to ensure that the rotation value remains within a specific range to
             * prevent potential issues with very large or negative rotation values.
             *  Here's a step-by-step explanation of what this code does:
             *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
             *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
             *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
             *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
             *     This is done to ensure that the value remains positive and within the range of
             *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
             *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
             *     modulo operation to the value obtained in step 2. This step guarantees that the value
             *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
             *     circle in radians.
             */
            const normalizedRotation =
                ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

            // Set the current stage based on the island's orientation
            switch (true) {
                case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
                    setCurrentStage(4);
                    break;
                case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
                    setCurrentStage(3);
                    break;
                case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
                    setCurrentStage(2);
                    break;
                case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
                    setCurrentStage(1);
                    break;
                default:
                    setCurrentStage(null);
            }
        }


    })

    useEffect(() => {
        const canvas = gl.domElement

        canvas.addEventListener('pointerdown', handlePointerDown)
        canvas.addEventListener('pointerup', handlePointerUp)
        canvas.addEventListener('pointermove', handlePointerMove)
        document.addEventListener('keydown', handleKeyDown)
        document.addEventListener('keyup', handleKeyUp)

        return () => {
            canvas.removeEventListener('pointerdown', handlePointerDown)
            canvas.removeEventListener('pointerup', handlePointerUp)
            canvas.removeEventListener('pointermove', handlePointerMove)
            document.removeEventListener('keydown', handleKeyDown)
            document.removeEventListener('keyup', handleKeyUp)
        }

    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove, handleKeyDown, handleKeyUp])

    return ( <group {...props} ref = {islandRef} >
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.floor.geometry}
            material={materials['Material.001']}
            position={[0, 1.774, 0]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.rug.geometry}
            material={materials['Material.010']}
            position={[-0.456, 0.43, 0.451]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.couch.geometry}
            material={materials.velvetgreen}
            position={[0.967, 0.427, 0.525]}
            scale={[0.45, 1, 0.95]}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.couch_legs.geometry}
                material={materials['Material.011']}
                position={[0.099, 0.034, 0.166]}
                scale={0.73}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.cushion.geometry}
                material={materials.velvetgreen}
                position={[0.104, 0.743, 0.346]}
                rotation={[0, -0.003, 1.131]}
                scale={[1.205, 0.95, 1.242]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.cushion_2.geometry}
                material={materials.velvetgreen}
                position={[0.108, 0.74, -0.36]}
                rotation={[0, -0.003, 1.131]}
                scale={[1.205, 0.95, 1.242]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.pillow1.geometry}
                material={materials['Material.010']}
                position={[-0.543, 0.639, -0.605]}
                rotation={[-2.229, 0.31, -0.657]}
                scale={[2.319, 1.348, 1.197]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.pillow2.geometry}
                material={materials['Material.010']}
                position={[-0.525, 0.692, 0.615]}
                rotation={[-0.324, -0.512, -2.6]}
                scale={[2.27, 1.339, 1.272]}
            />
        </mesh>
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.couch2.geometry}
            material={materials.velvetgreen}
            position={[-0.652, 0.854, -1.065]}
            rotation={[-Math.PI, 1.566, -Math.PI]}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.couch_legs001.geometry}
                material={materials['Material.011']}
                position={[0.028, -0.402, -0.116]}
                scale={[0.329, 0.73, 0.694]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.cushion_2001.geometry}
                material={materials.velvetgreen}
                position={[0.016, 0.319, 0.001]}
                rotation={[-0.001, -0.002, 1.225]}
                scale={[1.016, 0.456, 1.198]}
            />
        </mesh>
        <group position={[1.48, 2.462, 0.537]} rotation={[Math.PI / 2, -0.001, Math.PI / 2]}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube009_1.geometry}
                material={materials['Material.018']}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube009_2.geometry}
                material={materials['Material.016']}
            />
        </group>
        <group position={[1.466, 1.727, 0.471]} rotation={[Math.PI / 2, 0, Math.PI / 2]}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube007_1.geometry}
                material={materials['Material.018']}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube007_2.geometry}
                material={materials['Material.017']}
            />
        </group>
        <group
            position={[1.479, 2.097, -0.266]}
            rotation={[Math.PI / 2, -0.001, Math.PI / 2]}
            scale={1.306}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube010_1.geometry}
                material={materials['Material.018']}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube010_2.geometry}
                material={materials['Material.014']}
            />
        </group>
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.windowsill.geometry}
            material={materials['Material.002']}
            position={[0.076, 2.3, -1.753]}
            scale={[0.945, 0.945, 1.468]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Plane.geometry}
            material={materials['Material.003']}
            position={[0.161, 2.3, -1.613]}
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.718}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Bracket.geometry}
            material={materials['Material.009']}
            position={[-0.642, 2.874, -1.479]}
            rotation={[0, -1.546, 0]}
            scale={0.026}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.curtainrod.geometry}
            material={materials['Material.008']}
            position={[-0.646, 2.917, -1.358]}
            rotation={[0, 0, -1.57]}
            scale={0.045}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus.geometry}
            material={nodes.Torus.material}
            position={[-0.135, 0, 0.005]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus001.geometry}
            material={nodes.Torus001.material}
            position={[-0.259, 0, 0]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.curtain.geometry}
            material={materials['Material.001']}
            position={[0, 0, 0.005]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus002.geometry}
            material={nodes.Torus002.material}
            position={[-0.124, 0, 0]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus003.geometry}
            material={nodes.Torus003.material}
            position={[-0.258, 0, 0]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus004.geometry}
            material={nodes.Torus004.material}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus005.geometry}
            material={nodes.Torus005.material}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus006.geometry}
            material={nodes.Torus006.material}
            position={[-0.387, 0, 0]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus007.geometry}
            material={nodes.Torus007.material}
            position={[0.737, -0.002, 0.001]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus008.geometry}
            material={nodes.Torus008.material}
            position={[0.613, -0.002, -0.004]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.curtain001.geometry}
            material={materials['Material.001']}
            position={[0.872, -0.002, 0.001]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus009.geometry}
            material={nodes.Torus009.material}
            position={[0.747, -0.002, -0.004]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus010.geometry}
            material={nodes.Torus010.material}
            position={[0.614, -0.002, -0.004]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus011.geometry}
            material={nodes.Torus011.material}
            position={[0.872, -0.002, -0.004]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus012.geometry}
            material={nodes.Torus012.material}
            position={[0.872, -0.002, -0.004]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.Torus013.geometry}
            material={nodes.Torus013.material}
            position={[0.485, -0.002, -0.004]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.lamp.geometry}
            material={materials['Material.006']}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Sphere.geometry}
                material={nodes.Sphere.material}
                position={[1.183, 2.418, -1.007]}
                scale={-0.159}
            />
        </mesh>
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.lamp001.geometry}
            material={materials['Material.007']}
            position={[0.008, 0.005, 2.359]}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Sphere001.geometry}
                material={nodes.Sphere001.material}
                position={[1.183, 2.418, -1.007]}
                scale={-0.159}
            />
        </mesh>
        <group position={[-1.013, 2.442, -1.487]} rotation={[Math.PI / 2, 0, 0]}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder003.geometry}
                material={materials['Material.018']}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder003_1.geometry}
                material={materials['Material.001']}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube.geometry}
                material={nodes.Cube.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, 0]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube001.geometry}
                material={nodes.Cube001.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, -1.554]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube002.geometry}
                material={nodes.Cube002.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, -0.811]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube003.geometry}
                material={nodes.Cube003.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, -3.138]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube004.geometry}
                material={nodes.Cube004.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, 1.568]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube005.geometry}
                material={nodes.Cube005.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, 0.771]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube006.geometry}
                material={nodes.Cube006.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, 2.336]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube007.geometry}
                material={nodes.Cube007.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, -2.378]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube008.geometry}
                material={nodes.Cube008.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, -0.244]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube009.geometry}
                material={nodes.Cube009.material}
                position={[-0.001, -0.026, -0.001]}
                rotation={[-Math.PI / 2, 0, -2.008]}
                scale={0.839}
            />
        </group>
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.table.geometry}
            material={materials['Material.011']}
            position={[-0.449, 0.753, 0.601]}
            rotation={[0, 0.203, 0]}
            scale={[0.527, 0.764, 0.764]}
        />
        <group position={[-0.712, 0.949, 0.333]} rotation={[0, 0.873, 0]}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Circle001_1.geometry}
                material={materials.cups}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Circle001_2.geometry}
                material={materials['Material.021']}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Circle001.geometry}
                material={materials.cups}
            />
        </group>
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.plate.geometry}
            material={materials.cups}
            position={[-0.712, 0.923, 0.333]}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.plate2.geometry}
            material={materials.cups}
            position={[-0.583, 0.903, 0.841]}
            scale={1.557}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.DONUT.geometry}
            material={materials['Material.023']}
            position={[-0.555, 0.984, 0.806]}
            rotation={[0.108, -0.035, 0.009]}
            scale={1.217}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.sTOL.geometry}
            material={materials['Material.011']}
            position={[0.782, 1.216, -1.027]}
            rotation={[-Math.PI, 1.184, -Math.PI]}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube010.geometry}
                material={materials['Material.012']}
                scale={0.032}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube011.geometry}
                material={materials['Material.012']}
                rotation={[-Math.PI, 0.17, -Math.PI]}
                scale={0.032}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube012.geometry}
                material={materials['Material.012']}
                rotation={[Math.PI, -1.456, Math.PI]}
                scale={0.032}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube013.geometry}
                material={materials['Material.012']}
                rotation={[0, 1.421, 0]}
                scale={0.032}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder.geometry}
                material={materials['Material.012']}
                position={[0, -0.057, 0]}
                scale={0.928}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cylinder002.geometry}
                material={materials['Material.012']}
                position={[0, -0.535, 0]}
                scale={0.928}
            />
        </mesh>
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.por.geometry}
            material={materials['Material.001']}
            position={[0.782, 1.361, -1.027]}
            scale={0.1}
        />
        <mesh
            castShadow
            receiveShadow
            geometry={nodes.LEAVES.geometry}
            material={materials.ALEAF}
            position={[0.817, 1.481, -1.06]}
            rotation={[0, -0.894, 0]}
            scale={0.018}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube014.geometry}
                material={materials.ALEAF}
                position={[0.213, -3.563, 2.676]}
                rotation={[0, 0.894, 0]}
                scale={0.706}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube015.geometry}
                material={materials.ALEAF}
                position={[0.213, -5.156, 2.676]}
                scale={0.706}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube016.geometry}
                material={materials.ALEAF}
                position={[0.816, -3.563, 1.71]}
                rotation={[0, -0.888, 0]}
                scale={0.83}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube017.geometry}
                material={materials.ALEAF}
                position={[0.213, -3.563, 2.676]}
                rotation={[Math.PI, -1.422, Math.PI]}
                scale={0.706}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube018.geometry}
                material={materials.ALEAF}
                position={[0.213, -4.39, 2.676]}
                rotation={[Math.PI, -0.503, Math.PI]}
                scale={0.706}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube019.geometry}
                material={materials.ALEAF}
                position={[0.213, -4.1, 2.676]}
                rotation={[-Math.PI, 0.13, -Math.PI]}
                scale={0.883}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube020.geometry}
                material={materials.ALEAF}
                position={[0.213, -3.563, 2.676]}
                rotation={[-Math.PI, 1.414, -Math.PI]}
                scale={0.706}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube021.geometry}
                material={materials.ALEAF}
                position={[-2.309, -2.849, 3.603]}
                rotation={[-Math.PI, 1.414, -Math.PI]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Cube022.geometry}
                material={materials.ALEAF}
                position={[3.961, -2.508, 0.149]}
                rotation={[Math.PI, -1.422, Math.PI]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.wall.geometry}
                material={materials.Material}
                position={[17.643, 14.902, 73.03]}
                rotation={[0, 0.894, 0]}
                scale={56.147}
            />
        </mesh>
    </group>)
}


export default Island;